/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.group13.budgets;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
/**
 *
 * @author Brian Mounce
 * @author Carter King
 */
public class loadScreen extends javax.swing.JFrame {
    
    DefaultTableModel budgetModel;
    ArrayList<Budget> budgets;
    /**
     * Creates new form monthScreen
     */
    public loadScreen() {
        initComponents();
        
        budgetModel = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int col){
                return false;
            }
        };
        budgetTable.setModel(budgetModel);
        budgetModel.addColumn("Name");
        
        budgets = new ArrayList<Budget>();
        BudgetDAO dao = new BudgetDAO();
        
        int numBudgets = dao.getNumBudgets();
        //System.out.println("Number of budget records in DB: " + numBudgets);
        
        ArrayList<Integer> IDList = dao.getIDList();
        if(numBudgets > 0) {
            int rowCount = 0;
            for(int id : IDList) {
                Budget budget = dao.getBudget(id);
                budgets.add(budget);
                budgetModel.addRow(new Object[]{""});
                budgetModel.setValueAt(budget.getMonth(), rowCount, 0);
                rowCount++;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        budgetTable = new javax.swing.JTable();
        newMonthButton = new javax.swing.JButton();
        deleteMonthButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Budget Application");

        budgetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        jScrollPane2.setViewportView(budgetTable);

        newMonthButton.setText("New Month");
        newMonthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMonthButtonActionPerformed(evt);
            }
        });

        deleteMonthButton.setText("Delete Month");
        deleteMonthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMonthButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit Month");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newMonthButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editButton)
                        .addGap(36, 36, 36)
                        .addComponent(deleteMonthButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newMonthButton)
                    .addComponent(deleteMonthButton)
                    .addComponent(editButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Checks if a given string is a whole positive number. Returns false if it is not.
    public boolean isInt(String number){
        for(int i = 0 ; i < number.length(); i++){
            if(number.charAt(i) < 48 || number.charAt(i) > 57)
                return false;
        }
        return true;
    }
    
    /**
     * Dialogue box prompts user to select a month from the given list and to 
     * enter a year. If invalid year is entered a dialogue box appears informing
     * the user
     * @param evt 
     */
    private void newMonthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMonthButtonActionPerformed
        Object[] choices = {"January", "Febuary", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
        String monthString = (String) JOptionPane.showInputDialog(rootPane, "Select a month", "Month Select", JOptionPane.PLAIN_MESSAGE, null, choices, choices[0]);
        BudgetDAO dao = new BudgetDAO();

        if(!monthString.isEmpty()){
            String yearString = (String) JOptionPane.showInputDialog(rootPane, "Enter a year", 2020);
            if(isInt(yearString)){
                budgetModel.addRow(new Object[] {""});
                budgetTable.setValueAt(monthString+" "+yearString , budgetTable.getRowCount()-1 , 0);
                
                String budgetName = monthString+" "+yearString;
                ArrayList<Category> categories = new ArrayList<>();
                Budget budget = new Budget(budgetName, categories);
                
                int id = dao.saveBudget(budget);
                budget.setId(id);
                budgets.add(budget);
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Invalid input", "Error", JOptionPane.PLAIN_MESSAGE);
            }
        }
    }//GEN-LAST:event_newMonthButtonActionPerformed
    
    /**
     * Deletes the corresponding row from the database and removes the 
     * row from budgetTable
     * @param evt 
     */
    private void deleteMonthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMonthButtonActionPerformed
        if(budgetTable.getSelectedRow() == -1){
            return;
        }
        BudgetDAO dao = new BudgetDAO();
        String row = budgetTable.getValueAt(budgetTable.getSelectedRow(), 0).toString();
        int choice = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to delete " + row + "?", "Delete", JOptionPane.YES_NO_OPTION);
        if(choice == 0){
            dao.deleteBudget(budgets.get(budgetTable.getSelectedRow()));
            budgetModel.removeRow(budgetTable.getSelectedRow());
        }
        
    }//GEN-LAST:event_deleteMonthButtonActionPerformed

    /**
     * Creates new budgetScreen object and passes the budget object corresponding
     * to the row selected in budgetTable
     * @param evt 
     */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed

        if(budgetTable.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(rootPane, "Please select a budget.");
        }
        else{
            Budget budget = budgets.get(budgetTable.getSelectedRow());
            budgetScreen selectedBudget = new budgetScreen(budget);//pass budget object to budget screen
            this.setVisible(false);
            dispose();
            selectedBudget.setVisible(true);
        }
    }//GEN-LAST:event_editButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(loadScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(loadScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(loadScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(loadScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new loadScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable budgetTable;
    private javax.swing.JButton deleteMonthButton;
    private javax.swing.JButton editButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton newMonthButton;
    // End of variables declaration//GEN-END:variables
}
